from telegram import Update
import os
# from dotenv import load_dotenv # Kh√¥ng c·∫ßn d√πng load_dotenv khi deploy l√™n Render v√¨ bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c set tr·ª±c ti·∫øp
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application, MessageHandler, filters
import requests
from bs4 import BeautifulSoup
from datetime import datetime, time, timedelta, timezone
from zoneinfo import ZoneInfo # ƒê·∫£m b·∫£o th∆∞ vi·ªán n√†y c√≥ s·∫µn n·∫øu b·∫°n mu·ªën d√πng timezone ph·ª©c t·∫°p h∆°n

# CHAT_ID ban ƒë·∫ßu l√† None. N√≥ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ng∆∞·ªùi d√πng g·ª≠i l·ªánh /news
CHAT_ID = None

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
# Khi ch·∫°y c·ª•c b·ªô, bi·∫øn n√†y s·∫Ω ƒë∆∞·ª£c load t·ª´ .env n·∫øu b·∫°n gi·ªØ load_dotenv()
# Khi deploy tr√™n Render, bi·∫øn n√†y ƒë∆∞·ª£c Render cung c·∫•p tr·ª±c ti·∫øp
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    # In ra l·ªói n·∫øu kh√¥ng t√¨m th·∫•y token, h·ªØu √≠ch cho debug
    print("‚ö†Ô∏è L·ªói: Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")
    # T√πy ch·ªçn: b·∫°n c√≥ th·ªÉ raise m·ªôt exception n·∫øu mu·ªën d·ª´ng ch∆∞∆°ng tr√¨nh h·∫≥n
    # raise ValueError("TELEGRAM_BOT_TOKEN environment variable not set.")
    # ƒê·ªÉ bot kh√¥ng crash khi debug, c√≥ th·ªÉ g√°n t·∫°m m·ªôt gi√° tr·ªã r·ªóng
    TOKEN = "YOUR_DUMMY_TOKEN_FOR_LOCAL_DEBUG" # C·∫ßn ƒë·∫£m b·∫£o TOKEN th·∫≠t khi deploy

# ============================
# 1) H√†m l·∫•y tin t·ª´ Coin68
# ============================
def get_news_coin68():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Coin68:*"]
    url = 'https://coin68.com/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')
        
        articles = soup.find_all('div', {'class': 'MuiBox-root css-fv3lde'})

        for idx, article in enumerate(articles[:5], start=1):
            link_tag = article.find('a', href=True)
            title_tag = article.find('span', {'class': 'MuiTypography-root MuiTypography-metaSemi css-1dk5p1t'})

            if link_tag and title_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                if not link.startswith("http"):
                    link = url.rstrip('/') + link
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Coin68: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Coin68!"

# ===============================
# 2) H√†m l·∫•y tin t·ª´ Allinstation
# ===============================
def get_news_allinstation():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Allinstation:*"]
    url = 'https://allinstation.com/tin-tuc/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')

        articles = soup.find_all('div', {'class': 'col post-item'})

        for idx, article in enumerate(articles[:5], start=6):
            title_tag = article.find('h3', {'class': 'post-title is-large'})
            link_tag = article.find('a', href=True)

            if title_tag and link_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Allinstation: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Allinstation!"

# 3) G·ªôp tin t·ª´ c·∫£ 2 trang
def get_all_news():
    coin68_news = get_news_coin68()
    allin_news = get_news_allinstation()
    return coin68_news + "\n\n" + allin_news

# 4) G·ª≠i tin t·ª± ƒë·ªông ch·ªâ trong kho·∫£ng 09:00 - 22:00
async def auto_send_news(context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    if not CHAT_ID:
        print("‚ö†Ô∏è Ch∆∞a c√≥ CHAT_ID, bot ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m ho·∫∑c chat c√° nh√¢n!")
        return

    # L·∫•y gi·ªù UTC
    now_utc = datetime.now(timezone.utc)
    # C·ªông 7 gi·ªù ƒë·ªÉ ra gi·ªù VN (N·∫øu m√∫i gi·ªù c·ªßa b·∫°n l√† UTC+7, VD: H·ªì Ch√≠ Minh, H√† N·ªôi)
    # C√°ch t·ªët h∆°n l√† s·ª≠ d·ª•ng th∆∞ vi·ªán zoneinfo ƒë·ªÉ x·ª≠ l√Ω m√∫i gi·ªù ch√≠nh x√°c
    # vietnam_tz = ZoneInfo("Asia/Ho_Chi_Minh")
    # now_vn = now_utc.astimezone(vietnam_tz)
    now_vn = now_utc + timedelta(hours=7) 

    # Ch·ªâ g·ª≠i tin trong kho·∫£ng 9:00 - 22:00 gi·ªù VN
    if time(9, 0) <= now_vn.time() <= time(22, 0):
        news_message = get_all_news()
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID, 
                text=news_message, 
                parse_mode="Markdown",
                disable_web_page_preview=True # T·∫Øt preview link ƒë·ªÉ tr√°nh l√†m tin nh·∫Øn qu√° d√†i
            )
            print(f"‚úÖ ƒê√£ g·ª≠i tin t·ª± ƒë·ªông l√∫c {now_vn.strftime('%H:%M')} t·ªõi CHAT_ID: {CHAT_ID}")
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i tin t·ª± ƒë·ªông t·ªõi CHAT_ID {CHAT_ID}: {e}")
    else:
        print(f"‚è≥ {now_vn.strftime('%H:%M')} - Ngo√†i gi·ªù g·ª≠i tin (09:00 - 22:00 VN), b·ªè qua...")

# 5) L·ªánh /news ƒë·ªÉ l·∫•y tin
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    # C·∫≠p nh·∫≠t CHAT_ID khi c√≥ l·ªánh /news ƒë∆∞·ª£c g·ª≠i ƒë·∫øn
    CHAT_ID = update.message.chat_id
    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t CHAT_ID: {CHAT_ID}")

    news_message = get_all_news()
    try:
        await update.message.reply_text(news_message, parse_mode="Markdown", disable_web_page_preview=True)
        print(f"‚úÖ ƒê√£ tr·∫£ l·ªùi l·ªánh /news t·ªõi CHAT_ID: {CHAT_ID}")
    except Exception as e:
        print(f"‚ùå L·ªói khi tr·∫£ l·ªùi l·ªánh /news t·ªõi CHAT_ID {CHAT_ID}: {e}")

# 6) C·∫•u h√¨nh JobQueue: G·ª≠i tin t·ª± ƒë·ªông t·ª´ 09:00 - 22:00, c√°ch 3 gi·ªù/l·∫ßn
async def setup_jobs(application: Application):
    job_queue = application.job_queue
    # run_repeating(callback, interval, first)
    # interval=10800 gi√¢y = 3 gi·ªù
    # first=10 (gi√¢y): B·∫Øt ƒë·∫ßu l·∫ßn ƒë·∫ßu ti√™n sau 10 gi√¢y khi bot kh·ªüi ƒë·ªông
    job_queue.run_repeating(auto_send_news, interval=10800, first=10)
    print("‚úÖ ƒê√£ thi·∫øt l·∫≠p JobQueue ƒë·ªÉ g·ª≠i tin t·ª± ƒë·ªông m·ªói 3 gi·ªù.")

# =========================================================================
# 7) PH·∫¶N QUAN TR·ªåNG C·∫¶N S·ª¨A ƒê·ªÇ CH·∫†Y TR√äN RENDER HO·∫∂C C·ª§C B·ªò
# =========================================================================
def main() -> None:
    # ‚ö†Ô∏è Quan tr·ªçng: Khi deploy l√™n Render, kh√¥ng d√πng load_dotenv() v√¨ bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c set tr·ª±c ti·∫øp
    # N·∫øu ch·∫°y c·ª•c b·ªô ƒë·ªÉ debug, b·∫°n c√≥ th·ªÉ b·ªè comment d√≤ng d∆∞·ªõi n√†y:
    # load_dotenv() 

    application = ApplicationBuilder().token(TOKEN).post_init(setup_jobs).build()

    application.add_handler(CommandHandler("news", news))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, news)) # Th√™m handler cho tin nh·∫Øn text th√¥ng th∆∞·ªùng

    # L·∫•y th√¥ng tin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng c·ªßa Render
    # RENDER_EXTERNAL_HOSTNAME l√† t√™n mi·ªÅn m√† Render g√°n cho d·ªãch v·ª• c·ªßa b·∫°n
    # PORT l√† c·ªïng m√† Render y√™u c·∫ßu ·ª©ng d·ª•ng c·ªßa b·∫°n l·∫Øng nghe
    WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    PORT = int(os.environ.get("PORT", "8443")) # M·∫∑c ƒë·ªãnh 8443 n·∫øu kh√¥ng t√¨m th·∫•y PORT

    if WEBHOOK_HOST:
        # N·∫øu c√≥ bi·∫øn m√¥i tr∆∞·ªùng RENDER_EXTERNAL_HOSTNAME, ch√∫ng ta ƒëang ch·∫°y tr√™n Render
        # C·∫•u h√¨nh webhook
        WEBHOOK_URL_PATH = "/news" # ƒê∆∞·ªùng d·∫´n webhook b·∫°n mu·ªën
        FULL_WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_URL_PATH}"

        print(f"üöÄ Tri·ªÉn khai bot v·ªõi Webhook. L·∫Øng nghe tr√™n port: {PORT}")
        print(f"   Webhook URL ƒë·∫ßy ƒë·ªß: {FULL_WEBHOOK_URL}")

        application.run_webhook(
            listen="0.0.0.0",       # L·∫Øng nghe tr√™n t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ IP
            port=PORT,              # L·∫Øng nghe tr√™n c·ªïng ƒë∆∞·ª£c Render c·∫•p
            url_path=WEBHOOK_URL_PATH, # ƒê∆∞·ªùng d·∫´n m√† bot s·∫Ω x·ª≠ l√Ω c√°c update
            webhook_url=FULL_WEBHOOK_URL # URL m√† Telegram s·∫Ω g·ª≠i c√°c update ƒë·∫øn
        )
    else:
        # N·∫øu kh√¥ng c√≥ bi·∫øn m√¥i tr∆∞·ªùng RENDER_EXTERNAL_HOSTNAME, ch√∫ng ta ƒëang ch·∫°y c·ª•c b·ªô
        print("üíª Ch·∫°y bot ·ªü ch·∫ø ƒë·ªô Polling (ch·∫ø ƒë·ªô ph√°t tri·ªÉn c·ª•c b·ªô).")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

