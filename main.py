from telegram import Update
import os
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application
import requests
from bs4 import BeautifulSoup
from datetime import datetime, time
from datetime import time, timedelta, datetime
from zoneinfo import ZoneInfo
from datetime import datetime, timezone

CHAT_ID = None
load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ö†Ô∏è L·ªói: Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong file .env!")

# ============================
# 1) H√†m l·∫•y tin t·ª´ Coin68
# ============================
def get_news_coin68():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Coin68:*"]
    url = 'https://coin68.com/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')
        
        articles = soup.find_all('div', {'class': 'MuiBox-root css-fv3lde'})

        for idx, article in enumerate(articles[:5], start=1):
            link_tag = article.find('a', href=True)
            title_tag = article.find('span', {'class': 'MuiTypography-root MuiTypography-metaSemi css-1dk5p1t'})

            if link_tag and title_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                if not link.startswith("http"):
                    link = url.rstrip('/') + link
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Coin68: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Coin68!"

# ===============================
# 2) H√†m l·∫•y tin t·ª´ Allinstation
# ===============================
def get_news_allinstation():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Allinstation:*"]
    url = 'https://allinstation.com/tin-tuc/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')

        articles = soup.find_all('div', {'class': 'col post-item'})

        for idx, article in enumerate(articles[:5], start=6):
            title_tag = article.find('h3', {'class': 'post-title is-large'})
            link_tag = article.find('a', href=True)

            if title_tag and link_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Allinstation: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Allinstation!"

# 3) G·ªôp tin t·ª´ c·∫£ 2 trang
def get_all_news():
    coin68_news = get_news_coin68()
    allin_news = get_news_allinstation()
    return coin68_news + "\n\n" + allin_news

# 4) G·ª≠i tin t·ª± ƒë·ªông ch·ªâ trong kho·∫£ng 09:00 - 22:00
async def auto_send_news(context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    if not CHAT_ID:
        print("‚ö†Ô∏è Ch∆∞a c√≥ CHAT_ID, bot ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m!")
        return

    # L·∫•y gi·ªù UTC, +7 gi·ªù ƒë·ªÉ ra gi·ªù VN
    now_utc = datetime.now(timezone.utc)
    now_vn = now_utc + timedelta(hours=7)  # Gi·∫£ s·ª≠ b·∫°n ·ªü UTC+7

    # Ch·ªâ g·ª≠i tin trong kho·∫£ng 9:00 - 22:00 gi·ªù VN
    if time(9, 0) <= now_vn.time() <= time(22, 0):
        news_message = get_all_news()
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID, 
                text=news_message, 
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i tin: {e}")
    else:
        print(f"‚è≥ {now_vn.strftime('%H:%M')} - Ngo√†i gi·ªù g·ª≠i tin (09:00 - 22:00), b·ªè qua...")

# 5) L·ªánh /news ƒë·ªÉ l·∫•y tin
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    CHAT_ID = update.message.chat_id
    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t CHAT_ID: {CHAT_ID}")

    news_message = get_all_news()
    try:
        await update.message.reply_text(news_message, parse_mode="Markdown")
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i tin nh·∫Øn: {e}")

# 6) JobQueue: G·ª≠i tin t·ª± ƒë·ªông t·ª´ 09:00 - 22:00, c√°ch 3 gi·ªù/l·∫ßn
async def setup_jobs(application: Application):
    job_queue = application.job_queue
    job_queue.run_repeating(auto_send_news, interval=10800, first=10)

# 7) C·∫•u h√¨nh & ch·∫°y bot
app = ApplicationBuilder().token(TOKEN).post_init(setup_jobs).build()

app.add_handler(CommandHandler("news", news))
app.run_polling()
