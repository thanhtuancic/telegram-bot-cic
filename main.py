from telegram import Update
import os
# from dotenv import load_dotenv # Kh√¥ng c·∫ßn d√πng load_dotenv khi deploy l√™n Render v√¨ bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c set tr·ª±c ti·∫øp
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application, MessageHandler, filters
# from telegram.ext import WebhookHandler # D√íNG N√ÄY ƒê√É B·ªä X√ìA HO·∫∂C COMMENT OUT
# from telegram.ext.filters import MessageFilter # D√íNG N√ÄY C≈®NG ƒê√É B·ªä X√ìA HO·∫∂C COMMENT OUT
import requests
from bs4 import BeautifulSoup
from datetime import datetime, time, timedelta, timezone
from zoneinfo import ZoneInfo # ƒê·∫£m b·∫£o th∆∞ vi·ªán n√†y c√≥ s·∫µn n·∫øu b·∫°n mu·ªën d√πng timezone ph·ª©c t·∫°p h∆°n
import logging # Th√™m logging ƒë·ªÉ d·ªÖ debug

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# CHAT_ID ban ƒë·∫ßu l√† None. N√≥ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ng∆∞·ªùi d√πng g·ª≠i l·ªánh /news
CHAT_ID = None

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    print("‚ö†Ô∏è L·ªói: Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")
    TOKEN = "YOUR_DUMMY_TOKEN_FOR_LOCAL_DEBUG" # C·∫ßn ƒë·∫£m b·∫£o TOKEN th·∫≠t khi deploy

# ============================
# 1) H√†m l·∫•y tin t·ª´ Coin68
# ============================
def get_news_coin68():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Coin68:*"]
    url = 'https://coin68.com/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')
        
        articles = soup.find_all('div', {'class': 'MuiBox-root css-fv3lde'})

        for idx, article in enumerate(articles[:5], start=1):
            link_tag = article.find('a', href=True)
            title_tag = article.find('span', {'class': 'MuiTypography-root MuiTypography-metaSemi css-1dk5p1t'})

            if link_tag and title_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                if not link.startswith("http"):
                    link = url.rstrip('/') + link
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Coin68: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Coin68!"

# ===============================
# 2) H√†m l·∫•y tin t·ª´ Allinstation
# ===============================
def get_news_allinstation():
    news_list = ["üì∞ *Tin t·ª©c t·ª´ Allinstation:*"]
    url = 'https://allinstation.com/tin-tuc/'
    try:
        r = requests.get(url, timeout=10)
        r.encoding = r.apparent_encoding
        soup = BeautifulSoup(r.text, 'html.parser')

        articles = soup.find_all('div', {'class': 'col post-item'})

        for idx, article in enumerate(articles[:5], start=6):
            title_tag = article.find('h3', {'class': 'post-title is-large'})
            link_tag = article.find('a', href=True)

            if title_tag and link_tag:
                title = title_tag.text.strip()
                link = link_tag['href']
                news_list.append(f"[{idx}. {title}]({link})")

    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y tin t·ª´ Allinstation: {e}")

    return "\n".join(news_list) if len(news_list) > 1 else "Kh√¥ng t√¨m th·∫•y tin t·ª©c t·ª´ Allinstation!"

# 3) G·ªôp tin t·ª´ c·∫£ 2 trang
def get_all_news():
    coin68_news = get_news_coin68()
    allin_news = get_news_allinstation()
    return coin68_news + "\n\n" + allin_news

# 4) G·ª≠i tin t·ª± ƒë·ªông ch·ªâ trong kho·∫£ng 09:00 - 22:00
async def auto_send_news(context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    if not CHAT_ID:
        logger.warning("‚ö†Ô∏è Ch∆∞a c√≥ CHAT_ID, bot ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m ho·∫∑c chat c√° nh√¢n!")
        return

    # L·∫•y gi·ªù UTC
    now_utc = datetime.now(timezone.utc)
    # C·ªông 7 gi·ªù ƒë·ªÉ ra gi·ªù VN (N·∫øu m√∫i gi·ªù c·ªßa b·∫°n l√† UTC+7, VD: H·ªì Ch√≠ Minh, H√† N·ªôi)
    now_vn = now_utc + timedelta(hours=7) 

    # Ch·ªâ g·ª≠i tin trong kho·∫£ng 9:00 - 22:00 gi·ªù VN
    if time(9, 0) <= now_vn.time() <= time(22, 0):
        news_message = get_all_news()
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID, 
                text=news_message, 
                parse_mode="Markdown",
                disable_web_page_preview=True # T·∫Øt preview link ƒë·ªÉ tr√°nh l√†m tin nh·∫Øn qu√° d√†i
            )
            logger.info(f"‚úÖ ƒê√£ g·ª≠i tin t·ª± ƒë·ªông l√∫c {now_vn.strftime('%H:%M')} t·ªõi CHAT_ID: {CHAT_ID}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i tin t·ª± ƒë·ªông t·ªõi CHAT_ID {CHAT_ID}: {e}")
    else:
        logger.info(f"‚è≥ {now_vn.strftime('%H:%M')} - Ngo√†i gi·ªù g·ª≠i tin (09:00 - 22:00 VN), b·ªè qua...")

# 5) L·ªánh /news ƒë·ªÉ l·∫•y tin
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global CHAT_ID
    # C·∫≠p nh·∫≠t CHAT_ID khi c√≥ l·ªánh /news ƒë∆∞·ª£c g·ª≠i ƒë·∫øn
    CHAT_ID = update.message.chat_id
    logger.info(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t CHAT_ID: {CHAT_ID}")

    news_message = get_all_news()
    try:
        await update.message.reply_text(news_message, parse_mode="Markdown", disable_web_page_preview=True)
        logger.info(f"‚úÖ ƒê√£ tr·∫£ l·ªùi l·ªánh /news t·ªõi CHAT_ID: {CHAT_ID}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi tr·∫£ l·ªùi l·ªánh /news t·ªõi CHAT_ID {CHAT_ID}: {e}")

# 6) C·∫•u h√¨nh JobQueue: G·ª≠i tin t·ª± ƒë·ªông t·ª´ 09:00 - 22:00, c√°ch 3 gi·ªù/l·∫ßn
async def setup_jobs(application: Application):
    job_queue = application.job_queue
    job_queue.run_repeating(auto_send_news, interval=10800, first=10)
    logger.info("‚úÖ ƒê√£ thi·∫øt l·∫≠p JobQueue ƒë·ªÉ g·ª≠i tin t·ª± ƒë·ªông m·ªói 3 gi·ªù.")

# =========================================================================
# 7) PH·∫¶N QUAN TR·ªåNG C·∫¶N S·ª¨A ƒê·ªÇ CH·∫†Y TR√äN RENDER HO·∫∂C C·ª§C B·ªò
# =========================================================================

from flask import Flask, request, jsonify # Th√™m import Flask
from waitress import serve # Import waitress

# T·∫°o m·ªôt Flask app ri√™ng ƒë·ªÉ x·ª≠ l√Ω c√°c request HTTP kh√¥ng ph·∫£i t·ª´ Telegram
app_flask = Flask(__name__)

# Endpoint cho UptimeRobot ho·∫∑c Health Check
@app_flask.route("/news", methods=['GET', 'HEAD'])
def health_check():
    logger.info(f"Received health check request: {request.method} {request.url}")
    return "OK", 200 # Tr·∫£ v·ªÅ 200 OK cho c√°c y√™u c·∫ßu GET/HEAD

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ telegram Application instance
telegram_application_instance = None 

@app_flask.route("/news", methods=['POST'])
async def telegram_webhook():
    logger.info(f"Received Telegram webhook request: {request.method} {request.url}")
    if telegram_application_instance:
        update = Update.de_json(request.get_json(force=True), telegram_application_instance.bot)
        await telegram_application_instance.process_update(update)
        return "OK", 200
    else:
        logger.error("Telegram Application instance not initialized.")
        return "Internal Server Error", 500


def main() -> None:
    global telegram_application_instance # Khai b√°o s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    # Khi ch·∫°y c·ª•c b·ªô, b·∫°n c√≥ th·ªÉ b·ªè comment d√≤ng d∆∞·ªõi n√†y:
    # load_dotenv() 

    telegram_application_instance = ApplicationBuilder().token(TOKEN).post_init(setup_jobs).build()

    telegram_application_instance.add_handler(CommandHandler("news", news))
    telegram_application_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, news)) # Th√™m handler cho tin nh·∫Øn text th√¥ng th∆∞·ªùng

    WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    PORT = int(os.environ.get("PORT", "8443"))

    if WEBHOOK_HOST:
        logger.info(f"üöÄ Tri·ªÉn khai bot v·ªõi Webhook. L·∫Øng nghe tr√™n port: {PORT}")
        logger.info(f"   Webhook URL ƒë·∫ßy ƒë·ªß: https://{WEBHOOK_HOST}/news")
        
        # === D√≤ng M·ªöI: Kh·ªüi t·∫°o Application instance ===
        telegram_application_instance.initialize() # B·∫ÆT BU·ªòC G·ªåI KHI S·ª¨ D·ª§NG run_webhook TRONG C√ÅC T√çCH H·ª¢P KI·ªÇU N√ÄY
        # ===============================================

        # Ch·∫°y Flask app v·ªõi waitress
        serve(app_flask, host="0.0.0.0", port=PORT)

    else:
        logger.info("üíª Ch·∫°y bot ·ªü ch·∫ø ƒë·ªô Polling (ch·∫ø ƒë·ªô ph√°t tri·ªÉn c·ª•c b·ªô).")
        telegram_application_instance.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

